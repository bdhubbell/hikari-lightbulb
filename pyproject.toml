[build-system]
requires = ["wheel", "setuptools"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length     = 120
target-version  = ["py38"]
include         = ".*py$"

[tool.ruff]
line-length = 120
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # Pyflakes
    "I",     # isort
    "TCH",   # typechecking imports
    "N",     # naming
    "ASYNC", # async lints
    "Q",     # enforce double-quotes
    "RSE",   # avoid needless parens
    "SIM",   # simplification
    "RUF",   # ruff lints
    "D2",    # Docstring formatting
    "D213",  # Multi-line docstring summary should start at the second line
    "D3",    # Use triple-quotes
    "D415",  # First line of docstring should end with period
    "D417",  # Missing argument descriptions in docstring
    "D418",  # No docstring on @overload
    "D419",  # No empty docstring
]
fixable = [
    "I",     # isort errors
    "TCH",   # typechecking imports
    "F401",  # unused import
    "F404",  # late __future__ import
    "F541",  # f-string with no placeholders
]
ignore = [
    "D212",  # Multi-line docstring summary should start at the first line
    "RUF001", # ambiguous character
    "N818",   # exception name should end in Error
    "D205",   # 1 blank line required between summary line and description
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.per-file-ignores]
# F401 (Unused import) - init files don't use their imports
# F403 (Star import used) - hopefully we're sensible enough to know what objects modules contain
# F405 (Import via star) - everything is imported to top-level
"__init__.py" = ["F401", "F403", "F405"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.slotscheck]
strict-imports = true
require-superclass = true
require-subclass = true
exclude-classes = """
(
    ^lightbulb\\.commands\\.commands:CommandMeta$
)
"""

[tool.pyright]
include = ["lightbulb"]
exclude = ["docs", ".github"]
pythonVersion = "3.10"
typeCheckingMode = "strict"

reportUnnecessaryTypeIgnoreComment = "error"
reportMissingTypeStubs = "none"
reportImportCycles = "none" # Doesn't account for TYPE_CHECKING
reportIncompatibleMethodOverride = "none"  # This relies on ordering for keyword-only arguments
reportOverlappingOverload = "none" # Type-Vars in last overloads may interfere
reportIncompatibleVariableOverride = "none" # Cannot overwrite abstract properties using attrs
reportPrivateUsage = "none" # Too annoying

# Attrs validators will always be unknown
# https://github.com/python-attrs/attrs/issues/795
reportUnknownMemberType = "warning"
reportUntypedFunctionDecorator = "warning"
reportOptionalMemberAccess = "warning"
